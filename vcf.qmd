---
title: "Analysis of data from a VCF file"
author: "Herlemont Baptiste"
editor: 
  markdown: 
    wrap: 72
output:
  quarto::quarto_document:
    number_sections: true
format: 
  html:
    code-fold: true
engine: knitr
jupyter: python3
---
`r format(Sys.Date(), "%d/%m/%Y")`


```{r library, include=FALSE}
library(ggplot2)
library(dplyr)
library(knitr)
library(MetBrewer)
library(tidyr)
library(plotly)
library(viridis)
library(reticulate)
```

```{r setup, include=FALSE}
input_vcf_file <- "YourInputFileName.vcf.gz"  # Change "YourInputFileName.vcf.gz" to the name of your VCF file
output_csv_file_bySite <- "OutputFileNameBySite.csv"  # Change "OutputFileNameBySite.csv" to your desired output file name for site data
output_csv_file_byGeno <- "OutputFileNameByGeno.csv"  # Change "OutputFileNameByGeno.csv" to your desired output file name for genotype data


```

```{python VCF, eval=FALSE, include=FALSE}

import cyvcf2

input_vcf_file = r.input_vcf_file
output_csv_file_bySite = r.output_csv_file_bySite
output_csv_file_byGeno = r.output_csv_file_byGeno

def count_genotypes(gt):
    ref_count = het_count = alt_count = missing_count = 0

    if gt[0] == 0 and gt[1] == 0:
        ref_count += 1
    elif gt[0] == 1 and gt[1] == 1:
        alt_count += 1
    elif gt[0] == 0 and gt[1] == 1:
        het_count += 1
    elif gt[0] == 1 and gt[1] ==0:
        het_count += 1
    else:
        missing_count += 1

    return [ref_count, het_count, alt_count, missing_count]

def write_to_csv(record, record_type):
    ref_count = record.num_hom_ref
    alt_count = record.num_hom_alt
    het_count = record.num_het
    missing_count = record.num_unknown

    return (record_type, record.ID, ref_count, alt_count, het_count, missing_count)



sample_counts = {}

vcf = cyvcf2.VCF(input_vcf_file)

with open(output_csv_file_bySite, "w") as outfile_bySite:
    outfile_bySite.write("type\tID\tref\talt\thet\tmissing\n")

    for record in vcf:
        record_type = "snp" if len(record.REF) == 1 and all(len(alt) == 1 for alt in record.ALT) else "indel"
        line_to_write = write_to_csv(record, record_type)
        outfile_bySite.write(f"{line_to_write[0]}\t{line_to_write[1]}\t{line_to_write[2]}\t{line_to_write[3]}\t{line_to_write[4]}\t{line_to_write[5]}\n")

        variant_type = "SNP" if len(record.REF) == len(record.ALT[0]) else "INDEL"

        for i, sample in enumerate(vcf.samples):
            gt = record.genotypes[i]
            counts = count_genotypes(gt)


            if sample not in sample_counts:
                sample_counts[sample] = {
                    "Genotype": sample,
                    "SNP_ref": 0,
                    "SNP_alt": 0,
                    "SNP_het": 0,
                    "SNP_missing": 0,
                    "INDEL_ref": 0,
                    "INDEL_alt": 0,
                    "INDEL_het": 0,
                    "INDEL_missing": 0
                }

            sample_counts[sample][f"{variant_type}_ref"] += counts[0]
            sample_counts[sample][f"{variant_type}_alt"] += counts[2]
            sample_counts[sample][f"{variant_type}_het"] += counts[1]
            sample_counts[sample][f"{variant_type}_missing"] += counts[3]

vcf.close()

with open(output_csv_file_byGeno, "w") as f:
    f.write("Genotype\tSNP_ref\tSNP_alt\tSNP_het\tSNP_missing\tINDEL_ref\tINDEL_alt\tINDEL_het\tINDEL_missing\n")

    for sample, counts in sample_counts.items():
        f.write(f"{counts['Genotype']}\t{counts['SNP_ref']}\t{counts['SNP_alt']}\t{counts['SNP_het']}\t{counts['SNP_missing']}\t{counts['INDEL_ref']}\t{counts['INDEL_alt']}\t{counts['INDEL_het']}\t{counts['INDEL_missing']}\n")


```




## File overview

### Here are some metrics about the files

```{r, metrics, echo=FALSE, results='markup'}
file_sites <- read.delim(output_csv_file_bySite)
file1_name <- output_csv_file_bySite
file1_dim <- dim(file_sites)

file_genotypes <- read.delim(output_csv_file_byGeno)
file2_name <- output_csv_file_byGeno
file2_dim <- dim(file_genotypes)



cat("For the file", file1_name, ":\n")
cat("Number of rows :", file1_dim[1], "\n")
cat("Number of columns :", file1_dim[2], "\n\n")

cat("For the file", file2_name, ":\n")
cat("Number of rows :", file2_dim[1], "\n")
cat("Number of columns :", file2_dim[2], "\n")

file2_dim_value <- file2_dim[2]
file1_dim_value <- file1_dim[1]

```
To summarize, for the VCF file, there are **`r file2_dim_value`** genotypes and **`r file1_dim_value`** sites in total.




### You can visualize the file with genotype-specific information below:
```{r, table_genotype, echo=FALSE}
#table <- file_genotypes %>%
 # mutate(Genotype = as.factor(Genotype)) %>%
  #select(Genotype, SNP_missing, INDEL_missing)
kable(head(file_genotypes,20))
```
### You can visualize the file with site-specific information below:
```{r, table_site, echo=FALSE}
kable(head(file_sites,20))
```
## Visualization of Site statistics 
The total number of references is not displayed on the graph

```{r, distribution, echo=TRUE}

totals <- file_sites %>%
  gather(key = "Variable", value = "Value", alt:missing) %>%
  group_by(type, Variable) %>%
  summarise(Total = sum(Value), .groups = "keep")


ggplot(totals, aes(x = Variable, y = Total/1e6, fill = type)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = paste("n:", scales::comma(Total, big.mark = " "))), position = position_dodge(width = 0.9), vjust = -0.5) +
  labs(title = "Representation of the total occurrence count",
       x = "",
       y = "Total number (in millions)") +
  scale_fill_met_d("Veronese") +
  theme_minimal()
```


```{r, het_vio, echo=TRUE, warning=FALSE}
Cassat2_Scale8_color <- met.brewer(name = "Cassatt2" , n = 10, direction = -1, override.order = TRUE)
Cassat2_SNPHET_color <- Cassat2_Scale8_color[5]
Cassat2_INDELHET_color <- Cassat2_Scale8_color[6]
boxplotsnp <-Cassat2_Scale8_color[10]
boxplotindel <- Cassat2_Scale8_color[1]

ggplot(file_sites, aes(x = type, y = het, fill = type)) +
  geom_violin(position = "dodge", alpha = 0.6, ) +
  geom_boxplot(width = 0.1, color = c(snp = boxplotsnp, indel = boxplotindel), alpha = 1, outlier.shape = NA, show.legend = FALSE) +
  scale_fill_manual(values = c("snp" = Cassat2_SNPHET_color, "indel" = Cassat2_INDELHET_color), name = "") +
  xlab("Variant Type") +
  ylab("Number of Heterozygous Alleles per Site") +
  labs(title = "Distribution of Heterozygous Alleles by Variant Type") +
  theme_minimal()



```


## Visualization of Genotype statistics 
Representation of missing alleles according to genotypes


**This type of chart can be useful for selecting individuals of interest**
```{r, circular_plot, echo=TRUE, warning=FALSE}
data <- file_genotypes %>%
  mutate(Genotype = as.factor(Genotype)) %>%
  select(Genotype, SNP_missing, INDEL_missing)

max_value <- max(as.numeric(as.character(max(data$SNP_missing, na.rm = TRUE))),
                 as.numeric(as.character(max(data$INDEL_missing, na.rm = TRUE))))

Troy_SNP_color <- met.brewer(name = "Troy", n = 1)
Java_INDEL_color <- met.brewer(name = "Java", n = 1)

library(dplyr)


has_snp <- any(data$SNP_missing > 0)
has_indel <- any(data$INDEL_missing > 0)


if (has_snp & has_indel) {
ggplot(data, aes(x = Genotype)) +
  geom_bar(aes(y = SNP_missing, fill = "SNP"),width = 1.1, stat = "identity", position = position_dodge(width = 1.1), alpha = 0.9) +
  geom_bar(aes(y = INDEL_missing, fill = "INDEL"), width = 1.1, stat = "identity", position = position_dodge(width = 1.1), alpha = 0.9) +
  ylim(-max_value, max_value) +
  theme_minimal() +
  theme(
    axis.text = element_blank(),
    axis.title = element_blank(),
    panel.grid = element_blank(),
    plot.margin = unit(rep(-2, 4), "cm"),
    legend.margin = margin(c(0, 50, 0, 0)) 
  ) +
  coord_polar(start = 0) +
  scale_fill_manual(
    values = c(SNP = Troy_SNP_color, INDEL = Java_INDEL_color),
    name = "Type",
    labels = c("SNP" = "SNP", "INDEL" = "INDEL")
  )} else if (has_snp) {
    # Graphique uniquement pour SNP
    ggplot(data, aes(x = Genotype)) +
      geom_bar(aes(y = SNP_missing, fill = "SNP"), width = 1.1, stat = "identity", position = position_dodge(width = 1.1), alpha = 0.9) +
      ylim(-max_value, max_value) +
      theme_minimal() +
      theme(
        axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.margin = unit(rep(-2, 4), "cm"),
        legend.margin = margin(c(0, 50, 0, 0))
      ) +
      coord_polar(start = 0) +
      scale_fill_manual(values = c(SNP = Troy_SNP_color), name = "Type", labels = c("SNP" = "SNP"))
} else if (has_indel) {
    ggplot(data, aes(x = Genotype)) +
      geom_bar(aes(y = INDEL_missing, fill = "INDEL"), width = 1.1, stat = "identity", position = position_dodge(width = 1.1), alpha = 0.9) +
      ylim(-max_value, max_value) +
      theme_minimal() +
      theme(
        axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank(),
        plot.margin = unit(rep(-2, 4), "cm"),
        legend.margin = margin(c(0, 50, 0, 0))
      ) +
      coord_polar(start = 0) +
      scale_fill_manual(values = c(INDEL = Java_INDEL_color), name = "Type", labels = c("INDEL" = "INDEL"))
}


```
```{r, circular_plot_table, echo=FALSE, warning=FALSE}

percentage_to_show <- 0.05
num_genotypes_to_show <- ceiling((nrow(data) * percentage_to_show))

if (!has_snp & has_indel) {
  # Tableau pour les INDELs si uniquement des INDELs sont présents
  top_genotypes <- data %>%
    arrange(desc(INDEL_missing)) %>%
    head(num_genotypes_to_show) %>%
    select(Genotype, INDEL_missing, SNP_missing) # Sélection des colonnes souhaitées

  cat("Here are the", percentage_to_show * 100, "% of genotypes with the highest values of missing INDELs (",num_genotypes_to_show,") \n")
  kable(top_genotypes)
} else {
  top_genotypes <- data %>%
    arrange(desc(SNP_missing)) %>%
    head(num_genotypes_to_show) %>%
    select(Genotype, INDEL_missing, SNP_missing) # Sélection des colonnes souhaitées

  cat("Here are the", percentage_to_show * 100, "% of genotypes with the highest values of missing SNPs (",num_genotypes_to_show,") \n")
  kable(top_genotypes)
}
```

**This type of ordered chart can be useful for determining a selection threshold**
```{r, barplot, echo=TRUE}

Derain_SNPMISSING_color <- met.brewer(name = "Derain", n = 1)
Morgenstern_INDELMISSING_color <- met.brewer(name = "Morgenstern", n = 1)
file_genotypes$Genotype <- factor(file_genotypes$Genotype, levels = unique(file_genotypes$Genotype[order(file_genotypes$SNP_missing)]))

ARCHAMBAULT_Scale3_color <- met.brewer(name = "Archambault" , n = 3, direction = -1,override.order = TRUE)
ARCHAMBAULT_Yellow_Color <- ARCHAMBAULT_Scale3_color[1]
ARCHAMBAULT_OrangeColor <- ARCHAMBAULT_Scale3_color[2]
ARCHAMBAULT_Red_Color <- ARCHAMBAULT_Scale3_color[3]

if (has_snp) {

max_snp_missing <- max(file_genotypes$SNP_missing)

file_genotypes_sorted <- file_genotypes[order(file_genotypes$SNP_missing, decreasing = TRUE), ]
genotype90 <- head(file_genotypes_sorted$Genotype[file_genotypes_sorted$SNP_missing >= 0.9 * max_snp_missing], n = 1)
genotype80 <- tail(file_genotypes_sorted$Genotype[file_genotypes_sorted$SNP_missing >= 0.8 * max_snp_missing], n = 1)
genotype70 <- tail(file_genotypes_sorted$Genotype[file_genotypes_sorted$SNP_missing >= 0.7 * max_snp_missing], n = 1)

genotype90 <- as.character(genotype90)
genotype80 <- as.character(genotype80)
genotype70 <- as.character(genotype70)




ggplot(file_genotypes, aes(x = Genotype)) +
  geom_bar(aes(y = SNP_missing, fill = "SNP_Missing"), stat = "identity", position = "stack", color = Derain_SNPMISSING_color) +
  geom_bar(aes(y = INDEL_missing, fill = "INDEL_Missing"), stat = "identity", position = "stack", color = Morgenstern_INDELMISSING_color) +
  geom_vline(aes(xintercept = genotype90, color = "90%"), linetype = "solid", linewidth = 1) +
  geom_vline(aes(xintercept = genotype80, color = "80%"), linetype = "solid", linewidth = 1) +
  geom_vline(aes(xintercept = genotype70, color = "70%"), linetype = "solid", linewidth = 1) +
  theme_minimal() +
  ggtitle("SNP_missing and INDEL_missing by Genotype") +
  labs(x = "Genotype", y = "Number of Occurrences") +
  scale_fill_manual(values = c(SNP_Missing = Derain_SNPMISSING_color, INDEL_Missing = Morgenstern_INDELMISSING_color), name = "Category") +
  scale_color_manual(values = c("90%" = ARCHAMBAULT_Yellow_Color, "80%" = ARCHAMBAULT_OrangeColor, "70%" = ARCHAMBAULT_Red_Color), name = "Threshold") +
  guides(
    fill = guide_legend(title = "Type", direction = "vertical"),
    color = guide_legend(title = "Threshold", direction = "vertical")
  ) +
  theme(
    axis.text.x = element_blank(),
    legend.position = "right" # ou "bottom" si vous préférez la légende en bas
  )
} else if (!has_snp & has_indel) {
  # Tri des données par ordre croissant de INDEL_missing
  file_genotypes_sorted <- file_genotypes[order(file_genotypes$INDEL_missing), ]
  
  # Calcul des seuils pour INDEL_missing
  max_indel_missing <- max(file_genotypes_sorted$INDEL_missing)
  genotype90_indel <- as.numeric(head(file_genotypes_sorted$Genotype[file_genotypes_sorted$INDEL_missing >= 0.9 * max_indel_missing], n = 1))
  genotype80_indel <- as.numeric(tail(file_genotypes_sorted$Genotype[file_genotypes_sorted$INDEL_missing >= 0.8 * max_indel_missing], n = 1))
  genotype70_indel <- as.numeric(tail(file_genotypes_sorted$Genotype[file_genotypes_sorted$INDEL_missing >= 0.7 * max_indel_missing], n = 1))

  # Création du graphique
  ggplot(file_genotypes_sorted, aes(x = reorder(Genotype, INDEL_missing))) +
    geom_bar(aes(y = INDEL_missing, fill = "INDEL_Missing"), stat = "identity") +
    geom_vline(aes(xintercept = genotype90_indel, color = "90% Threshold"), linetype = "solid", linewidth = 1.5) +
    geom_vline(aes(xintercept = genotype80_indel, color = "80% Threshold"), linetype = "solid", linewidth = 1.5) +
    geom_vline(aes(xintercept = genotype70_indel, color = "70% Threshold"), linetype = "solid", linewidth = 1.5) +
    theme_minimal() +
    ggtitle("INDEL_missing by Genotype") +
    labs(x = "", y = "Number of Occurrences") +
    scale_fill_manual(values = c(INDEL_Missing = Morgenstern_INDELMISSING_color), name = "Category") +
    scale_color_manual(values = c("90% Threshold" = ARCHAMBAULT_Yellow_Color, 
                                  "80% Threshold" = ARCHAMBAULT_OrangeColor, 
                                  "70% Threshold" = ARCHAMBAULT_Red_Color), 
                       name = "Threshold") +
    theme(axis.text.x = element_blank(), 
          legend.position = "right")
}






```

```{r, barplot_table, echo=FALSE}
cat("You can observe the total number and the genotypes that exceed various thresholds")

total_rows <- nrow(file_genotypes)

thresholds <- c(0.9, 0.8, 0.7)
if (has_snp) {
  # Cas où il y a des SNP (et éventuellement des INDELs)
  max_snp_missing <- max(file_genotypes$SNP_missing)

  summary_data <- lapply(thresholds, function(threshold) {
    filtered_data <- filter(file_genotypes, SNP_missing > threshold * max_snp_missing)
    return(data.frame(Threshold = paste0(threshold * 100, "%"),
                      Total = nrow(filtered_data),
                      Genotype = toString(filtered_data$Genotype)))
  })

} else if (has_indel) {
  # Cas où il n'y a que des INDELs
  max_indel_missing <- max(file_genotypes$INDEL_missing)

  summary_data <- lapply(thresholds, function(threshold) {
    filtered_data <- filter(file_genotypes, INDEL_missing > threshold * max_indel_missing)
    return(data.frame(Threshold = paste0(threshold * 100, "%"),
                      Total = nrow(filtered_data),
                      Genotype = toString(filtered_data$Genotype)))
  })
}

summary_table <- do.call(rbind, summary_data)

kable(summary_table)
```
